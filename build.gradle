plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'checkstyle'
	id 'org.owasp.dependencycheck' version '8.4.0'
}

group = 'es.in2'
version = '0.4.0'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.9"
}

checkstyle {
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
	source ='src/main/java'
}

checkstyleTest {
	source ='src/test/java'
}

sonar {
	properties {
		property "sonar.projectName", "Credential Issuer"
		property "sonar.projectKey", "in2workspace_credential-issuer"
		property "sonar.organization", "in2workspace"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.exclusions",
				"src/main/java/es/in2/issuer/IssuerApplication.java, "
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { setUrl('https://jitpack.io') }
	maven { setUrl('https://repo.danubetech.com/repository/maven-public/') }
}

ext {
	set('springCloudVersion', "2023.0.0")
}

dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-webflux' //exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-reactor-jetty')
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	// EUDI Wallet libraries
	implementation 'eu.europa.ec.eudi:eudi-lib-jvm-openid4vci-kt:0.1.3'

	// JSON
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
	implementation 'org.json:json:20240303'

	// CBOR
	implementation('com.upokecenter:cbor:4.5.2')

	// COSE
	implementation('com.augustcellars.cose:cose-java:1.1.0')

	// Compress
	implementation('org.apache.commons:commons-compress:1.20')

	// Base 45
	implementation('io.github.ehn-digital-green-development:base45:0.0.3')

	// Base 58
	implementation("com.github.multiformats:java-multibase:v1.1.1")

	// DB
	runtimeOnly 'org.postgresql:postgresql'
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:3.2.0"
	implementation "org.hibernate:hibernate-validator:8.0.0.Final"
	// r2dbc
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'
	implementation 'org.flywaydb:flyway-core'

	// UTILS
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation 'org.jetbrains:annotations:13.0'

	// CACHE
	implementation 'com.google.guava:guava:31.0.1-android'

	// DevTools
	compileOnly('org.projectlombok:lombok:1.18.26')
	annotationProcessor('org.projectlombok:lombok:1.18.26')
	testCompileOnly('org.projectlombok:lombok:1.18.26')
	testAnnotationProcessor('org.projectlombok:lombok:1.18.26')
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Nimbus-jjwt
	implementation('com.nimbusds:nimbus-jose-jwt:9.30.2')
	implementation('io.jsonwebtoken:jjwt-api:0.11.5')
	runtimeOnly('io.jsonwebtoken:jjwt-impl:0.11.5')
	runtimeOnly('io.jsonwebtoken:jjwt-jackson:0.11.5')

	// AZURE
	implementation('com.azure.spring:spring-cloud-azure-starter-appconfiguration:5.7.0')
	implementation('com.azure.spring:spring-cloud-azure-starter-keyvault-secrets:5.7.0')

	// Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.2.0'

	// Logback
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

	// Monitoring
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// Resilience
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'

	// Unit Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation('org.springframework.boot:spring-boot-starter-aop')
	testImplementation('org.junit.jupiter:junit-jupiter-api:5.10.2')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.10.2')
	testImplementation ('io.projectreactor:reactor-test')
	testImplementation('io.mockk:mockk:1.13.5')
	testImplementation ('org.mockito:mockito-inline:3.11.2')
	testImplementation('com.squareup.okhttp3:mockwebserver:4.12.0')
	testImplementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.4')

	// Integration Test
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

configurations.configureEach {
	exclude module: 'slf4j-simple'
}

tasks.named('compileJava') {
	inputs.files(tasks.named('processResources'))
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	dependsOn(tasks.test)
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}

	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				"**/IssuerVciBackendApplication**",
				"**/CredentialResponseErrorCodes**",
				"**/configurations/**",
				"**/handler/**",
				"**/**Serializer**/**",
				"**/enums/**",
				"**/Constants**"
		])
	}))
}

tasks.register('printVersion') {
	doLast {
		println version
	}
}

tasks.register('printProjectName') {
	doLast {
		println rootProject.name
	}
}

